/*
 *  TINET (TCP/IP Protocol Stack)
 * 
 *  Copyright (C) 2001-2017 by Dep. of Computer Science and Engineering
 *                   Tomakomai National College of Technology, JAPAN
 *
 *  上記著作権者は，以下の (1)～(4) の条件か，Free Software Foundation 
 *  によって公表されている GNU General Public License の Version 2 に記
 *  述されている条件を満たす場合に限り，本ソフトウェア（本ソフトウェア
 *  を改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
 *  利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次の条件を満たすこと．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，その適用可能性も
 *  含めて，いかなる保証も行わない．また，本ソフトウェアの利用により直
 *  接的または間接的に生じたいかなる損害に関しても，その責任を負わない．
 * 
 *  @(#) $Id: tcp_echo_srv1.cfg 1.7 2017/6/1 8:50:8 abe $
 */

/*
 *  TCP ECHO サーバ #1、送受信タスク同一型
 *  コンフィギュレーションファイル
 */

#ifdef USE_TCP_ECHO_SRV1

/* タスク */

CRE_TSK(TCP_ECHO_SRV_TASK1,  {
	TA_HLNG | TA_ACT,
	1,
	tcp_echo_srv_task,
	TCP_ECHO_SRV_MAIN_PRIORITY,
	TCP_ECHO_SRV_STACK_SIZE,
	NULL
	});

#if NUM_TCP_ECHO_SRV_TASKS >= 2

CRE_TSK(TCP_ECHO_SRV_TASK2,  {
	TA_HLNG | TA_ACT,
	2,
	tcp_echo_srv_task,
	TCP_ECHO_SRV_MAIN_PRIORITY,
	TCP_ECHO_SRV_STACK_SIZE,
	NULL
	});

#endif	/* of #if NUM_TCP_ECHO_SRV_TASKS >= 2 */

#if NUM_TCP_ECHO_SRV_TASKS >= 3

CRE_TSK(TCP_ECHO_SRV_TASK3,  {
	TA_HLNG | TA_ACT,
	3,
	tcp_echo_srv_task,
	TCP_ECHO_SRV_MAIN_PRIORITY,
	TCP_ECHO_SRV_STACK_SIZE,
	NULL
	});

#endif	/* of #if NUM_TCP_ECHO_SRV_TASKS >= 3 */

#if NUM_TCP_ECHO_SRV_TASKS >= 4

CRE_TSK(TCP_ECHO_SRV_TASK4,  {
	TA_HLNG | TA_ACT,
	4,
	tcp_echo_srv_task,
	TCP_ECHO_SRV_MAIN_PRIORITY,
	TCP_ECHO_SRV_STACK_SIZE,
	NULL
	});

#endif	/* of #if NUM_TCP_ECHO_SRV_TASKS >= 4 */

#if NUM_TCP_ECHO_SRV_TASKS >= 5

CRE_TSK(TCP_ECHO_SRV_TASK5,  {
	TA_HLNG | TA_ACT,
	5,
	tcp_echo_srv_task,
	TCP_ECHO_SRV_MAIN_PRIORITY,
	TCP_ECHO_SRV_STACK_SIZE,
	NULL
	});

#endif	/* of #if NUM_TCP_ECHO_SRV_TASKS >= 5 */

#if NUM_TCP_ECHO_SRV_TASKS >= 6

CRE_TSK(TCP_ECHO_SRV_TASK6,  {
	TA_HLNG | TA_ACT,
	6,
	tcp_echo_srv_task,
	TCP_ECHO_SRV_MAIN_PRIORITY,
	TCP_ECHO_SRV_STACK_SIZE,
	NULL
	});

#endif	/* of #if NUM_TCP_ECHO_SRV_TASKS >= 6 */

#if NUM_TCP_ECHO_SRV_TASKS >= 7

CRE_TSK(TCP_ECHO_SRV_TASK7,  {
	TA_HLNG | TA_ACT,
	7,
	tcp_echo_srv_task,
	TCP_ECHO_SRV_MAIN_PRIORITY,
	TCP_ECHO_SRV_STACK_SIZE,
	NULL
	});

#endif	/* of #if NUM_TCP_ECHO_SRV_TASKS >= 7 */

#if NUM_TCP_ECHO_SRV_TASKS >= 8

CRE_TSK(TCP_ECHO_SRV_TASK8,  {
	TA_HLNG | TA_ACT,
	8,
	tcp_echo_srv_task,
	TCP_ECHO_SRV_MAIN_PRIORITY,
	TCP_ECHO_SRV_STACK_SIZE,
	NULL
	});

#endif	/* of #if NUM_TCP_ECHO_SRV_TASKS >= 8 */

/* セマフォ */

#ifdef USE_TCP_NON_BLOCKING

CRE_SEM(SEM_TCP_ECHO_SRV_NBLK_READY1,	{ TA_TPRI, 0, 1 });

#if NUM_TCP_ECHO_SRV_TASKS >= 2
CRE_SEM(SEM_TCP_ECHO_SRV_NBLK_READY2,	{ TA_TPRI, 0, 1 });
#endif
#if NUM_TCP_ECHO_SRV_TASKS >= 3
CRE_SEM(SEM_TCP_ECHO_SRV_NBLK_READY3,	{ TA_TPRI, 0, 1 });
#endif
#if NUM_TCP_ECHO_SRV_TASKS >= 4
CRE_SEM(SEM_TCP_ECHO_SRV_NBLK_READY4,	{ TA_TPRI, 0, 1 });
#endif
#if NUM_TCP_ECHO_SRV_TASKS >= 5
CRE_SEM(SEM_TCP_ECHO_SRV_NBLK_READY5,	{ TA_TPRI, 0, 1 });
#endif
#if NUM_TCP_ECHO_SRV_TASKS >= 6
CRE_SEM(SEM_TCP_ECHO_SRV_NBLK_READY6,	{ TA_TPRI, 0, 1 });
#endif
#if NUM_TCP_ECHO_SRV_TASKS >= 7
CRE_SEM(SEM_TCP_ECHO_SRV_NBLK_READY7,	{ TA_TPRI, 0, 1 });
#endif
#if NUM_TCP_ECHO_SRV_TASKS >= 8
CRE_SEM(SEM_TCP_ECHO_SRV_NBLK_READY8,	{ TA_TPRI, 0, 1 });
#endif

#endif	/* of #ifdef USE_TCP_NON_BLOCKING */

#endif	/* of #ifdef USE_TCP_ECHO_SRV1 */
